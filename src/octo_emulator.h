/**
*
*  octo_emulator.h
*
*  an emulator core for CHIP-8, SCHIP, and XO-CHIP
*  bytecode, with full support for Octo quirks flags.
*  this core contains no io and depends only
*  upon the C standard library.
*
**/

#include <string.h> // memset()
#include <stdio.h>  // snprintf()
#include <stdlib.h> // abs(), rand()
#include <stdint.h> // uint8_t uint_16t

/**
*
*  Emulator Options and Quirks
*
**/

#define OCTO_TOUCH_NONE       0
#define OCTO_TOUCH_SWIPE      1
#define OCTO_TOUCH_SEG16      2
#define OCTO_TOUCH_SEG16_FILL 3
#define OCTO_TOUCH_GAMEPAD    4
#define OCTO_TOUCH_VIP        5

#define OCTO_PALETTE_SIZE     6
#define OCTO_COLOR_0          0
#define OCTO_COLOR_1          1
#define OCTO_COLOR_2          2
#define OCTO_COLOR_3          3
#define OCTO_COLOR_BACKGROUND 4
#define OCTO_COLOR_SOUND      5

typedef struct {
  // core settings
  int tickrate;                  // {7,15,20,30,100,200,500,1000,10000,...}
  int max_rom;                   // {3232, 3583, 3584, 65024}
  int rotation;                  // {0, 90, 180, 270}
  int font;                      // OCTO_FONT_...
  int touch_mode;                // OCTO_TOUCH_...
  int colors[OCTO_PALETTE_SIZE]; // OCTO_COLOR_... (ARGB)

  // quirks flags
  char q_shift;
  char q_loadstore;
  char q_jump0;
  char q_logic;
  char q_clip;
  char q_vblank;
} octo_options;

void octo_default_options(octo_options*options){
  memset(options,0,sizeof(octo_options));
  options->tickrate=20;
  options->max_rom=3584;
  int dc[]={0xFF996600,0xFFFFCC00,0xFFFF6600,0xFF662200,0xFF000000,0xFFFFAA00};
  memcpy(options->colors,dc,sizeof(dc));
}

/**
*
*  Fonts
*
**/

char octo_font_small[5][5*16]={
  #define OCTO_FONT_SMALL_OCTO 0
  {
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
  },
  #define OCTO_FONT_SMALL_VIP 1
  {
    0xF0, 0x90, 0x90, 0x90, 0xF0,
    0x60, 0x20, 0x20, 0x20, 0x70,
    0xF0, 0x10, 0xF0, 0x80, 0xF0,
    0xF0, 0x10, 0xF0, 0x10, 0xF0,
    0xA0, 0xA0, 0xF0, 0x20, 0x20,
    0xF0, 0x80, 0xF0, 0x10, 0xF0,
    0xF0, 0x80, 0xF0, 0x90, 0xF0,
    0xF0, 0x10, 0x10, 0x10, 0x10,
    0xF0, 0x90, 0xF0, 0x90, 0xF0,
    0xF0, 0x90, 0xF0, 0x10, 0xF0,
    0xF0, 0x90, 0xF0, 0x90, 0x90,
    0xF0, 0x50, 0x70, 0x50, 0xF0,
    0xF0, 0x80, 0x80, 0x80, 0xF0,
    0xF0, 0x50, 0x50, 0x50, 0xF0,
    0xF0, 0x80, 0xF0, 0x80, 0xF0,
    0xF0, 0x80, 0xF0, 0x80, 0x80,
  },
  #define OCTO_FONT_SMALL_DREAM 2
  {
    0xE0, 0xA0, 0xA0, 0xA0, 0xE0,
    0x40, 0x40, 0x40, 0x40, 0x40,
    0xE0, 0x20, 0xE0, 0x80, 0xE0,
    0xE0, 0x20, 0xE0, 0x20, 0xE0,
    0x80, 0xA0, 0xA0, 0xE0, 0x20,
    0xE0, 0x80, 0xE0, 0x20, 0xE0,
    0xE0, 0x80, 0xE0, 0xA0, 0xE0,
    0xE0, 0x20, 0x20, 0x20, 0x20,
    0xE0, 0xA0, 0xE0, 0xA0, 0xE0,
    0xE0, 0xA0, 0xE0, 0x20, 0xE0,
    0xE0, 0xA0, 0xE0, 0xA0, 0xA0,
    0xC0, 0xA0, 0xE0, 0xA0, 0xC0,
    0xE0, 0x80, 0x80, 0x80, 0xE0,
    0xC0, 0xA0, 0xA0, 0xA0, 0xC0,
    0xE0, 0x80, 0xE0, 0x80, 0xE0,
    0xE0, 0x80, 0xC0, 0x80, 0x80,
  },
  #define OCTO_FONT_SMALL_ETI 3
  {
    0xE0, 0xA0, 0xA0, 0xA0, 0xE0,
    0x20, 0x20, 0x20, 0x20, 0x20,
    0xE0, 0x20, 0xE0, 0x80, 0xE0,
    0xE0, 0x20, 0xE0, 0x20, 0xE0,
    0xA0, 0xA0, 0xE0, 0x20, 0x20,
    0xE0, 0x80, 0xE0, 0x20, 0xE0,
    0xE0, 0x80, 0xE0, 0xA0, 0xE0,
    0xE0, 0x20, 0x20, 0x20, 0x20,
    0xE0, 0xA0, 0xE0, 0xA0, 0xE0,
    0xE0, 0xA0, 0xE0, 0x20, 0xE0,
    0xE0, 0xA0, 0xE0, 0xA0, 0xA0,
    0x80, 0x80, 0xE0, 0xA0, 0xE0,
    0xE0, 0x80, 0x80, 0x80, 0xE0,
    0x20, 0x20, 0xE0, 0xA0, 0xE0,
    0xE0, 0x80, 0xE0, 0x80, 0xE0,
    0xE0, 0x80, 0xC0, 0x80, 0x80,
  },
  #define OCTO_FONT_SMALL_FISH 4
  {
    0x60, 0xA0, 0xA0, 0xA0, 0xC0,
    0x40, 0xC0, 0x40, 0x40, 0xE0,
    0xC0, 0x20, 0x40, 0x80, 0xE0,
    0xC0, 0x20, 0x40, 0x20, 0xC0,
    0x20, 0xA0, 0xE0, 0x20, 0x20,
    0xE0, 0x80, 0xC0, 0x20, 0xC0,
    0x40, 0x80, 0xC0, 0xA0, 0x40,
    0xE0, 0x20, 0x60, 0x40, 0x40,
    0x40, 0xA0, 0x40, 0xA0, 0x40,
    0x40, 0xA0, 0x60, 0x20, 0x40,
    0x40, 0xA0, 0xE0, 0xA0, 0xA0,
    0xC0, 0xA0, 0xC0, 0xA0, 0xC0,
    0x60, 0x80, 0x80, 0x80, 0x60,
    0xC0, 0xA0, 0xA0, 0xA0, 0xC0,
    0xE0, 0x80, 0xC0, 0x80, 0xE0,
    0xE0, 0x80, 0xC0, 0x80, 0x80,
  },
};
char octo_font_big[4][10*16]={
  #define OCTO_FONT_BIG_OCTO 0
  {
    0xFF, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF, // 0
    0x18, 0x78, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0xFF, // 1
    0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, // 2
    0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, // 3
    0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF, 0x03, 0x03, 0x03, 0x03, // 4
    0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, // 5
    0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, // 6
    0xFF, 0xFF, 0x03, 0x03, 0x06, 0x0C, 0x18, 0x18, 0x18, 0x18, // 7
    0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, // 8
    0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, // 9
    0x7E, 0xFF, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF, 0xC3, 0xC3, 0xC3, // A
    0xFC, 0xFC, 0xC3, 0xC3, 0xFC, 0xFC, 0xC3, 0xC3, 0xFC, 0xFC, // B
    0x3C, 0xFF, 0xC3, 0xC0, 0xC0, 0xC0, 0xC0, 0xC3, 0xFF, 0x3C, // C
    0xFC, 0xFE, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFE, 0xFC, // D
    0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, // E
    0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0  // F
  },
  #define OCTO_FONT_BIG_SCHIP 1
  {
    0x3C, 0x7E, 0xE7, 0xC3, 0xC3, 0xC3, 0xC3, 0xE7, 0x7E, 0x3C,
    0x18, 0x38, 0x58, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C,
    0x3E, 0x7F, 0xC3, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xFF, 0xFF,
    0x3C, 0x7E, 0xC3, 0x03, 0x0E, 0x0E, 0x03, 0xC3, 0x7E, 0x3C,
    0x06, 0x0E, 0x1E, 0x36, 0x66, 0xC6, 0xFF, 0xFF, 0x06, 0x06,
    0xFF, 0xFF, 0xC0, 0xC0, 0xFC, 0xFE, 0x03, 0xC3, 0x7E, 0x3C,
    0x3E, 0x7C, 0xE0, 0xC0, 0xFC, 0xFE, 0xC3, 0xC3, 0x7E, 0x3C,
    0xFF, 0xFF, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x60, 0x60,
    0x3C, 0x7E, 0xC3, 0xC3, 0x7E, 0x7E, 0xC3, 0xC3, 0x7E, 0x3C,
    0x3C, 0x7E, 0xC3, 0xC3, 0x7F, 0x3F, 0x03, 0x03, 0x3E, 0x7C,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // no hex chars!
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  },
  #define OCTO_FONT_BIG_FISH 2
  {
    0x7C, 0xC6, 0xCE, 0xDE, 0xD6, 0xF6, 0xE6, 0xC6, 0x7C, 0x00, // at most 7x9 pixels!
    0x10, 0x30, 0xF0, 0x30, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00,
    0x78, 0xCC, 0xCC, 0x0C, 0x18, 0x30, 0x60, 0xCC, 0xFC, 0x00,
    0x78, 0xCC, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0xCC, 0x78, 0x00,
    0x0C, 0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x0C, 0x1E, 0x00,
    0xFC, 0xC0, 0xC0, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00,
    0x38, 0x60, 0xC0, 0xC0, 0xF8, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
    0xFE, 0xC6, 0xC6, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00,
    0x78, 0xCC, 0xCC, 0xEC, 0x78, 0xDC, 0xCC, 0xCC, 0x78, 0x00,
    0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x18, 0x18, 0x30, 0x70, 0x00,
    0x30, 0x78, 0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00,
    0xFC, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0xFC, 0x00,
    0x3C, 0x66, 0xC6, 0xC0, 0xC0, 0xC0, 0xC6, 0x66, 0x3C, 0x00,
    0xF8, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00,
    0xFE, 0x62, 0x60, 0x64, 0x7C, 0x64, 0x60, 0x62, 0xFE, 0x00,
    0xFE, 0x66, 0x62, 0x64, 0x7C, 0x64, 0x60, 0x60, 0xF0, 0x00,
  },
  #define OCTO_FONT_BIG_NONE 3
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  },
};

#define OCTO_FONT_OCTO        0
#define OCTO_FONT_VIP         1
#define OCTO_FONT_DREAM_6800  2
#define OCTO_FONT_ETI_660     3
#define OCTO_FONT_SCHIP       4
#define OCTO_FONT_FISH        5

char* octo_font_sets[][2]={
  {octo_font_small[OCTO_FONT_SMALL_OCTO ], octo_font_big[OCTO_FONT_BIG_OCTO ]},
  {octo_font_small[OCTO_FONT_SMALL_VIP  ], octo_font_big[OCTO_FONT_BIG_NONE ]},
  {octo_font_small[OCTO_FONT_SMALL_DREAM], octo_font_big[OCTO_FONT_BIG_NONE ]},
  {octo_font_small[OCTO_FONT_SMALL_ETI  ], octo_font_big[OCTO_FONT_BIG_NONE ]},
  {octo_font_small[OCTO_FONT_SMALL_OCTO ], octo_font_big[OCTO_FONT_BIG_SCHIP]},
  {octo_font_small[OCTO_FONT_SMALL_FISH ], octo_font_big[OCTO_FONT_BIG_FISH ]},
};

/**
*
*  Emulator State
*
**/

#define OCTO_HALT_MAX 256

typedef struct {
  // core
  uint8_t  ram[64*1024]; // memory
  uint8_t  px [128*64];  // framebuffer ({0,1,2,3} per pixel)
  uint8_t  ppx[128*64];  // previous framebuffer (for minimizing repaints)
  uint16_t ret[16];      // return stack
  int      rp;           // return stack pointer
  uint8_t  v[16];        // v registers
  uint16_t pc;           // program counter
  uint16_t i;            // index register
  uint8_t  dt;           // delay timer
  uint8_t  st;           // sound timer
  char     hires;        // in SCHIP 128x64 mode?
  uint8_t  flags[16];    // SCHIP flag variables
  uint8_t  pattern[16];  // XO-CHIP audio pattern
  uint8_t  pitch;        // XO-CHIP audio pitch
  double   osc;          // XO-CHIP audio oscillator offset
  int      plane;        // XO-CHIP graphics plane
  long     ticks;        // how many cycles have been executed?
  int      had_sound;    // was audio played in the last batch of instructions?
  int      pending;      // a blocking key input, pending debounce
  octo_options options;

  // input
  char wait;
  char wait_reg;
  char keys[16];

  // debugger
  char halt;
  char halt_message[OCTO_HALT_MAX];
} octo_emulator;

void octo_emulator_init(octo_emulator* e, char* rom, size_t romsize, octo_options* options, char* flags){
  memset(e,0,sizeof(octo_emulator));
  memset(e->ppx,-1,sizeof(e->ppx));
  if (options!=NULL) memcpy(&e->options,options,sizeof(octo_options)); else octo_default_options(&e->options);
  if (flags  !=NULL) memcpy(&e->flags,flags,16);
  e->pc=0x200;
  e->plane=1;
  e->pending=-1;
  e->pitch=64;
  e->osc=0;
  memcpy(e->ram+0x200,rom,romsize);
  memcpy(e->ram,     octo_font_sets[e->options.font][0], 5*16);
  memcpy(e->ram+5*16,octo_font_sets[e->options.font][1],10*16);
}

/**
*
*  Monitors
*
*
* %[bytes][typecode]
*
* if [bytes] is omitted, imply length 1.
*
* c -> 7-bit ascii character(s)
* i -> integer
* b -> binary (zero-padded)
* x -> hex (zero-padded, uppercase)
*
**/

uint8_t octo_monitor_get(octo_emulator*e, int is_register,int offset){
  if(offset<0||offset>(is_register?16:65536))return 0;
  uint8_t*src=is_register?e->v:e->ram;
  return src[offset];
}
void octo_monitor_binary(char*dest,uint8_t byte){
  for(int z=0;z<8;z++)(*dest++)=((byte>>(7-z))&1)?'1':'0';
}
void octo_monitor_format(octo_emulator*e, int is_register,int base,int len,char* format, char*dest,int dest_len){
  int d=0, o=0; // dest buffer, source data offset
  if(format==NULL){
    for(int z=0;z<len&&d<dest_len-5;z++)d+=snprintf(dest+d,dest_len-d,"0x%02X%c",octo_monitor_get(e,is_register,base+o++),z%8==7?'\n':' ');
    return;
  }
  for(int i=0;format[i]&&d<dest_len-1;i++){
    if(format[i]!='%'){dest[d++]=format[i];continue;}i++;
    int n=0; while(format[i]>='0'&&format[i]<='9')n=n*10+format[i++]-'0'; if(n<1)n=1;
    if     (format[i]=='c')for(int z=0;z<n&&d<dest_len-1;z++)dest[d++]=0x7F&octo_monitor_get(e,is_register,base+o++);
    else if(format[i]=='x')for(int z=0;z<n&&d<dest_len-2;z++)d+=snprintf(dest+d,dest_len-d,"%02X",octo_monitor_get(e,is_register,base+o++));
    else if(format[i]=='b')for(int z=0;z<n&&d<dest_len-8;z++)octo_monitor_binary(dest+d,octo_monitor_get(e,is_register,base+o++)),d+=8;
    else{long l=0;for(int z=0;z<n;z++)l=(l<<8)|octo_monitor_get(e,is_register,base+o++);d+=snprintf(dest+d,dest_len-d,"%ld",l);}
  }
  dest[d]='\0';
}

/**
*
*  Core Emulation
*
**/

uint8_t octo_get(octo_emulator*e,uint8_t offset){return e->ram[e->i+offset];}
void octo_set(octo_emulator*e,uint8_t offset,uint8_t value){e->ram[e->i+offset]=value;}
uint16_t octo_emulator_word(octo_emulator*e){uint16_t r=(e->ram[e->pc]<<8)|e->ram[e->pc+1];return e->pc+=2, r;}
void octo_emulator_skip(octo_emulator*e){uint16_t r=(e->ram[e->pc]<<8)|e->ram[e->pc+1];e->pc+=r==0xF000?4:2;}
void octo_emulator_carry(octo_emulator*e,int dest,uint8_t value,char flag){e->v[dest]=value, e->v[0xF]=flag&1;}
void octo_emulator_math(octo_emulator*e,int x,int y,int op){
  int t;
  switch(op){
    case 0x0: e->v[x] =e->v[y];                                                               break;
    case 0x1: e->v[x]|=e->v[y]; if(e->options.q_logic)e->v[0xF]=0;                            break;
    case 0x2: e->v[x]&=e->v[y]; if(e->options.q_logic)e->v[0xF]=0;                            break;
    case 0x3: e->v[x]^=e->v[y]; if(e->options.q_logic)e->v[0xF]=0;                            break;
    case 0x4: t=e->v[x]+e->v[y], octo_emulator_carry(e,x,t,t>0xFF);                           break;
    case 0x5: t=e->v[x]-e->v[y], octo_emulator_carry(e,x,t,e->v[x]>=e->v[y]);                 break;
    case 0x7: t=e->v[y]-e->v[x], octo_emulator_carry(e,x,t,e->v[y]>=e->v[x]);                 break;
    case 0x6: if(e->options.q_shift)y=x; t=e->v[y]>>1, octo_emulator_carry(e,x,t,e->v[y]&1);  break;
    case 0xE: if(e->options.q_shift)y=x; t=e->v[y]<<1, octo_emulator_carry(e,x,t,e->v[y]>>7); break;
    default: e->halt=1, snprintf(e->halt_message,OCTO_HALT_MAX,"Unknown Math Opcode 0x8%X%X%0X",x,y,op);
  }
}
void octo_emulator_misc(octo_emulator*e, int x, int op){
  switch(op){
    case 0x01: e->plane=x&3;                                                                          break;
    case 0x02: for(int z=0;z<16;z++)e->pattern[z]=octo_get(e,z);                                      break;
    case 0x07: e->v[x]=e->dt;                                                                         break;
    case 0x0A: e->wait=1, e->wait_reg=x;                                                              break;
    case 0x15: e->dt=e->v[x];                                                                         break;
    case 0x18: e->st=e->v[x];                                                                         break;
    case 0x1E: e->i+=e->v[x];                                                                         break;
    case 0x29: e->i= 5*(e->v[x]&0xF);                                                                 break;
    case 0x30: e->i=10*(e->v[x]&0xF)+(5*16);                                                          break;
    case 0x33: octo_set(e,0,(e->v[x]/100)%10),octo_set(e,1,(e->v[x]/10)%10),octo_set(e,2,e->v[x]%10); break;
    case 0x3A: e->pitch=e->v[x];                                                                      break;
    case 0x55: for(int z=0;z<=x;z++)octo_set(e,z,e->v[z]); if(!e->options.q_loadstore)e->i+=x+1;      break;
    case 0x65: for(int z=0;z<=x;z++)e->v[z]=octo_get(e,z); if(!e->options.q_loadstore)e->i+=x+1;      break;
    case 0x75: for(int z=0;z<=(0xF&x);z++)e->flags[z]=e->v[z];                                        break;
    case 0x85: for(int z=0;z<=(0xF&x);z++)e->v[z]=e->flags[z];                                        break;
    default: e->halt=1, snprintf(e->halt_message,OCTO_HALT_MAX,"Unknown Misc Opcode 0xF%X%0X",x,op);
  }
}
uint8_t* octo_emulator_pix(octo_emulator*e,int x,int y){
  return e->px + (e->hires? ((y&63)*128)+(x&127): ((y&31)* 64)+(x& 63));
}
void octo_emulator_draw(octo_emulator*e,int x,int y,int color){
  if(color==0) return;
  uint8_t* p=octo_emulator_pix(e,x,y);
  if((color&*p)==0) (*p)|=color; // set   pixel
  else(*p)&=~color, e->v[0xF]=1; // clear pixel
}
void octo_emulator_sprite(octo_emulator*e, int x, int y, int len){
  e->v[0xF]=0;
  int i=e->i, row=e->hires?128:64, col=e->hires?64:32, xd=len==0?16:8, yd=len==0?16:len;
  for(int color=1;color<=2;color++){
    if(!(e->plane&color))continue;
    for(int a=0;a<yd;a++)for(int b=0;b<xd;b++){
      int c=len==0?(e->ram[i+(2*a)+(b>7?1:0)]>>(7-(b%8)))&1:
                   (e->ram[i+   a           ]>>(7- b   ))&1;
      if(e->options.q_clip) if((x%row)+b>=row||(y%col)+a>=col) c=0;
      octo_emulator_draw(e,b+x,a+y,c?color:0);
    }
    i+=len==0?32:len;
  }
}
void octo_emulator_move_pix(octo_emulator*e,int dx,int dy,int sx,int sy){
  for(int color=1;color<=2;color++)if(e->plane&color){
    uint8_t *d=octo_emulator_pix(e,dx,dy), *s=octo_emulator_pix(e,sx,sy);
    int c=(sx<0||sy<0||sx>=(e->hires?128:64)||sy>=(e->hires?64:32))?0:color&*s;
    (*d)&=~color; // remove old pixel
    (*d)|=c;      // add new pixel
  }
}
void octo_emulator_instruction(octo_emulator*e){
  if(e->wait)return;
  e->ticks++;
  uint16_t op=octo_emulator_word(e), x=(op>>8)&0xF, y=(op>>4)&0xF;
  uint16_t o=(op>>12)&0xF, nnn=0xFFF&op, nn=0xFF&op, n=0xF&op, row=e->hires?128:64, col=e->hires?64:32;
  if(op==0x00E0){for(size_t z=0;z<sizeof(e->px);z++)e->px[z]&=~e->plane;                                     return;}
  if(op==0x00EE){e->pc=e->ret[--(e->rp)];                                                                    return;}
  if(op==0x00FD){e->halt=1, e->halt_message[0]='\0';                                                         return;}
  if(op==0x00FE){e->hires=0, memset(e->px,0,sizeof(e->px));                                                  return;}
  if(op==0x00FF){e->hires=1, memset(e->px,0,sizeof(e->px));                                                  return;}
  if(op==0xF000){e->i=octo_emulator_word(e);                                                                 return;}
  if((op&0xF0FF)==0xE09E){if(e->v[x]<=15&& e->keys[e->v[x]]) octo_emulator_skip(e);                          return;}
  if((op&0xF0FF)==0xE0A1){if(e->v[x] >15||!e->keys[e->v[x]]) octo_emulator_skip(e);                          return;}
  if((op&0xF00F)==0x5002){for(int z=0;z<=abs(x-y);z++) octo_set(e,z,e->v[x<y?x+z:x-z]);                      return;}
  if((op&0xF00F)==0x5003){for(int z=0;z<=abs(x-y);z++) e->v[x<y?x+z:x-z]=octo_get(e,z);                      return;}
  if((op&0xFFF0)==0x00C0){for(int y=col-1;y>=0;y--)for(int x=0;x<row;x++)octo_emulator_move_pix(e,x,y,x,y-n);return;} // scroll down
  if((op&0xFFF0)==0x00D0){for(int y=0;y<col;y++)for(int x=0;x<row;x++)   octo_emulator_move_pix(e,x,y,x,y+n);return;} // scroll up
  if(op==0x00FB)         {for(int y=0;y<col;y++)for(int x=row-1;x>=0;x--)octo_emulator_move_pix(e,x,y,x-4,y);return;} // scroll right
  if(op==0x00FC)         {for(int y=0;y<col;y++)for(int x=0;x<row;x++)   octo_emulator_move_pix(e,x,y,x+4,y);return;} // scroll left
  switch(o){
    case 0x0: e->halt=1, e->halt_message[0]='\0';                break;
    case 0x1: e->pc=nnn;                                         break;
    case 0x2: e->ret[e->rp++]=e->pc, e->pc=nnn;                  break;
    case 0x3: if(e->v[x]==nn) octo_emulator_skip(e);             break;
    case 0x4: if(e->v[x]!=nn) octo_emulator_skip(e);             break;
    case 0x5: if(e->v[x]==e->v[y]) octo_emulator_skip(e);        break;
    case 0x6: e->v[x]=nn;                                        break;
    case 0x7: e->v[x]+=nn;                                       break;
    case 0x8: octo_emulator_math(e,x,y,n);                       break;
    case 0x9: if(e->v[x]!=e->v[y]) octo_emulator_skip(e);        break;
    case 0xA: e->i=nnn;                                          break;
    case 0xB: e->pc=nnn+e->v[e->options.q_jump0?(nnn>>8)&0xF:0]; break;
    case 0xC: e->v[x]=rand()&nn;                                 break;
    case 0xD: octo_emulator_sprite(e,e->v[x],e->v[y],n);         break;
    case 0xF: octo_emulator_misc(e,x,nn);                        break;
    default: e->halt=1, snprintf(e->halt_message,OCTO_HALT_MAX,"Unknown Opcode 0x%0X",op);  
  }
  if(e->rp>12){e->halt=1;snprintf(e->halt_message,OCTO_HALT_MAX,"Call Stack Overflow");}
}
